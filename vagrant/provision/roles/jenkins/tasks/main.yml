---
- name: install python-software-properties
  apt: pkg=python-software-properties state=present force=yes

- name: install node key file
  apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present

- name: add node repository into sources list.
  apt_repository: repo='deb https://deb.nodesource.com/node_0.12 xenial main' state=present

- name: update cache
  apt: update_cache=yes force=yes

- name: install pre-requisites
  apt: pkg={{item}} state=present force=yes
  with_items:
    - docker.io
    - golang
    - python-pip
    - xvfb
    - firefox=45.0.2+build1-0ubuntu1
    - git
    - curl
    - nodejs=0.12.18-1nodesource1~xenial1
    - ruby
    - ruby-dev

- name: Create symlink to nodejs
  file: src=/usr/bin/nodejs dest=/usr/bin/node state=link

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present
  when: jenkins_version is undefined

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: yes
  when: jenkins_version is undefined

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    dest: "/tmp/jenkins.deb"
  when: jenkins_version is defined

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins.deb"
  register: specific_version

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins.deb"
    state: installed
  when: specific_version.stat.exists

- name: Install Jenkins from repository.
  apt:
    name: jenkins
    state: installed
  when: jenkins_version is undefined


- name: Configure npm registry for current install user if proxy set
  shell: npm config set registry {{ nodejs_npm_registry }}
  when: with_proxy

- name: Configure npm registry for Jenkins user if proxy set
  shell: npm config set registry {{ nodejs_npm_registry }}
  become: true
  become_user: jenkins
  when: with_proxy

- sudo: yes
  sudo_user: root
  npm: name={{item}} global=yes
  with_items:
    - grunt-cli
    - bower
    - typescript
    - typings@1.5.0

#gem plugin does'nt work correct
- raw: sudo gem install compass

- name: install Jenkins proxy config if necessary
  sudo: yes
  sudo_user: jenkins
  copy: src=proxy.xml dest=/var/lib/jenkins/proxy.xml owner=jenkins
  when: with_proxy
  notify: restart jenkins
- name: Tune Jenkins proxy per global variable
  sudo: yes
  sudo_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/proxy.xml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "<proxy>"
    content: |
      <name>{{http_proxy_host}}</name>
      <port>{{http_proxy_port}}</port>
  when: with_proxy

- name: create .gradle directory
  file: path=/var/lib/jenkins/.gradle state=directory owner=jenkins

- name: install gradle.properties with proxy if necessary
  sudo: yes
  sudo_user: jenkins
  copy: src=gradle.properties dest=/var/lib/jenkins/.gradle/gradle.properties owner=jenkins
  when: with_proxy
- name: Tune gradle proxy per global variable
  sudo: yes
  sudo_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/.gradle/gradle.properties
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    content: |
      systemProp.http.proxyHost={{http_proxy_host}}
      systemProp.http.proxyPort={{http_proxy_port}}
      systemProp.https.proxyHost={{http_proxy_host}}
      systemProp.https.proxyPort={{http_proxy_port}}
  when: with_proxy

- raw: sudo service jenkins restart

# wait 300 seconds for port 8080 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: install config.xml
  sudo: yes
  sudo_user: jenkins
  copy: src={{item}} dest=/var/lib/jenkins/{{item}} owner=jenkins
  with_items:
    - config.xml
    - jenkins.mvn.GlobalMavenConfig.xml
    - hudson.tasks.Maven.xml
    - org.jenkinsci.plugins.xvfb.Xvfb.xml
    - org.jenkins.ci.plugins.xframe_filter.XFrameFilterPageDecorator.xml
  notify: restart jenkins

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: download jenkins update-center.js
  sudo: yes
  sudo_user: jenkins
  get_url: url=http://updates.jenkins-ci.org/update-center.json dest=/tmp/update-center.js owner=jenkins

- name: remove first and last line javascript wrapper
  sudo: yes
  sudo_user: jenkins
  raw:  sed '1d;$d' /tmp/update-center.js > /tmp/update-center.json

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "/var/lib/jenkins/init.groovy.d/basic-security.groovy"
    state: absent

- name: create init groovy directory
  sudo: yes
  sudo_user: jenkins
  file: path="/var/lib/jenkins/init.groovy.d/" state=directory

- name: provision Jenkins admin and anonymous users
  sudo: yes
  sudo_user: jenkins
  copy: src=basic-security.groovy dest=/var/lib/jenkins/init.groovy.d/basic-security owner=jenkins
  notify: restart jenkins

- name: push it to the update URL
  sudo: yes
  sudo_user: jenkins
  raw:  'curl -X POST -H "Accept: application/json" -d @/tmp/update-center.json http://localhost:8080/updateCenter/byId/default/postBack'

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- name: download jenkins cli
  sudo: yes
  sudo_user: jenkins
  get_url: url=http://localhost:8080/jnlpJars/jenkins-cli.jar dest=/tmp/jenkins-cli.jar owner=jenkins

- name: install jenkins plugins
  sudo: yes
  sudo_user: jenkins
  raw:  java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ install-plugin {{item}}
  with_items:
      - git
      - git-client
      - chucknorris
      - greenballs
      - build-pipeline-plugin
      - delivery-pipeline-plugin
      - copyartifact
      - performance
      - jacoco
      - sonar
      - http://mirrors.jenkins-ci.org/plugins/buildgraph-view/1.5.2/buildgraph-view.hpi
      - xvfb
      - ws-cleanup
      - xframe-filter-plugin
      - htmlpublisher
  notify: restart jenkins
  ignore_errors: True

- name: restart jenkins
  sudo: yes
  sudo_user: jenkins
  raw:  java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ restart

# wait 300 seconds for port 8000 to become open on the host, don't start checking for 5 seconds
- wait_for: port=8080 timeout=300 delay=30

- file: dest=/var/lib/jenkins/repo-cache/appstash mode=755 owner=jenkins group=jenkins state=directory

- name: get GIT repository
  sudo: yes
  sudo_user: jenkins
  git: repo={{github_url}} dest=/var/lib/jenkins/repo-cache/appstash bare=yes

- name: Setup cron job to update GIT repository automatically
  sudo: yes
  sudo_user: jenkins
  cron: name="Update AppStash Git Repository" minute="*/60" job="cd /var/lib/jenkins/repo-cache/appstash; git fetch origin +refs/heads/*:refs/heads/* --prune"

- name: install jenkins jobs
  sudo: yes
  sudo_user: jenkins
  raw: 'sh /provision/roles/jenkins/files/restoreAllJobs.sh'
  ignore_errors: yes

- name: Tune GIT repository and branch per global variable
  sudo: yes
  sudo_user: jenkins
  blockinfile:
    dest: /var/lib/jenkins/config.xml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    block: |
      <int>3</int>
      <string>GIT_REPOSITORY</string>
      <string>{{github_url}}</string>
      <string>BRANCH_TO_BUILD</string>
      <string>{{github_branch}}</string>
      <string>PROD_SERVERS</string>
      <string>{{prod_servers}}</string>

- file: path=/var/lib/jenkins/.ssh/ mode=0755 owner=jenkins group=jenkins state=directory
- file: path=/var/lib/jenkins/.ssh/known_hosts mode=0755 owner=jenkins group=jenkins state=touch
- copy: src=id_rsa.pub dest=/var/lib/jenkins/.ssh/id_rsa.pub mode=600 group=jenkins owner=jenkins
- copy: src=id_rsa dest=/var/lib/jenkins/.ssh/id_rsa mode=600 group=jenkins owner=jenkins

- name: start jenkins deployment pipeline
  sudo: yes
  sudo_user: jenkins
  command: 'java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ build {{item}}'
  with_items:
    - shop-monolitic-build
    - shop-monolitic-build
    - shop-microservice-product-service-build
    - shop-microservice-cart-service-build
    - shop-microservice-navigation-service-build
    - shop-microservice-recommendation-service-build
    - shop-microservice-product-service-build
    - shop-microservice-dataloader-build
    - shop-microservice-catalog-ui-build
    - shop-microservice-checkout-ui-build
    - shop-microservice-registration-ui-build
  ignore_errors: yes

- name: add jenkins to docker group
  raw: gpasswd -a jenkins docker
  sudo: yes
