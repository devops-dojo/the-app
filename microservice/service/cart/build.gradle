apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'pkg-debian'

jar.baseName = "cart-microservice"

mainClassName = "io.github.zutherb.appstash.shop.service.cart.Boot"
def cardPort = 18100

applicationDefaultJvmArgs = [
    '-Dspring.profiles.active=production',
    "-Dserver.port=$cardPort"
]

idea {
    module {
        name='cart-microservice'
    }
}

configurations {
    all*.exclude group: 'org.springframework.security'
    all*.exclude group: 'org.springframework.data', module: 'spring-data-mongodb'
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/groovy'
            srcDir 'src/main/resources'
        }
    }
    test {
        resources {
            srcDir 'src/test/groovy'
        }
    }
}

dependencies {
    compile commonDeps
    compile springDeps
    compile jacksonDeps
    compile("org.springframework.data:spring-data-redis:$springDataRedisVersion")
    compile("org.springframework.boot:spring-boot-starter-redis")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.hateoas:spring-hateoas")
    compile("redis.clients:jedis:$jedisVersion")

    compile("de.codecentric:spring-boot-starter-admin-client:$springBootAdminVersion")

    testCompile testDeps
}

def debName = "cart"

task prepareDeb {
    dependsOn installApp

    copy {
        from "${buildDir}/install/"
        into "${buildDir}/debian-data/usr/share/shop/"
    }
}

debian {
    packagename = "cart-service"
    publications = ['mavenStuff']
    controlDirectory = "${projectDir}/debian/control"
    changelogFile = "${projectDir}/debian/changelog"
    outputFile = "${buildDir}/debian/${debName}_${version}.deb"

    data {
        dir {
            name = "${projectDir}/debian/data"
            exclusions = ["**/.DS_Store", "changelog"]
        }
        dir {
            name = "${buildDir}/debian-data/"
            exclusions = ["**/.DS_Store"]
        }
    }
}

jar {
    def manifestClasspath = configurations.compile.collect { it.getName() }.join(',')
    def cmd = "git rev-parse HEAD"
    def proc = cmd.execute()
    manifest {
        attributes("Manifest-Version"       : "1.0",
                "Created-By"             : vendor,
                "Specification-Title"    : appName,
                "Specification-Version"  : version,
                "Specification-Vendor"   : vendor,
                "Implementation-Title"   : appName,
                "Implementation-Version" : version,
                "Implementation-Vendor"  : vendor,
                "Git-Revision"           : proc.text.trim(),
                "Build"                  : "${System.getenv("JOB_NAME")}",
                "Build-Number"           : "${System.getenv("BUILD_NUMBER")}",
                "Class-Path"             : manifestClasspath)
    }
}

distDocker {
    dependsOn build

    applicationName = 'cart-service'
    tagVersion = "latest"
    tag = "zutherb/${applicationName}"

    setEnvironment "CART_SERVICE_PROFILES", "production"
    setEnvironment "CART_SERVICE_PORT", "$cardPort"

    exposePort cardPort
}
